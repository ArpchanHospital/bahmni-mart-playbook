# This is copied from bahmni-playbooks and will be deleted after merged with bahmni.

- name: set authentication parameter from the tag
  set_fact:
    authentication: true
  tags:
  - authentication

- name: Check Bahmni-installer version on command box
  local_action: command rpm -q bahmni-installer --qf "%{VERSION}\n"
  register: bahmniVersion

- name: Evaluate Bahmni Version
  set_fact:
    isBahmniLessthan92: "{{ bahmniVersion.stdout == \"0.91\" or bahmniVersion.stdout == \"0.90\" or bahmniVersion.stdout == \"0.89\" }}"

- name: Evaluate postgres versions for bahmni version < 0.92
  set_fact:
    postgres_repo_rpm_location: "{{postgres92_repo_rpm_location}}"
    postgres_repo_download_url: "{{postgres92_repo_download_url}}"
    postgres_version: "{{postgres92_version}}"
    postgres_bin_version: "{{postgres92_bin_version}}"
  when: isBahmniLessthan92

- name: Evaluate postgres versions for bahmni versions >= 0.92
  set_fact:
    postgres_repo_rpm_location: "{{postgres96_repo_rpm_location}}"
    postgres_repo_download_url: "{{postgres96_repo_download_url}}"
    postgres_version: "{{postgres96_version}}"
    postgres_bin_version: "{{postgres96_bin_version}}"
  when: isBahmniLessthan92 == false

- name: Check if postgres yum repo rpm is present
  stat: path={{postgres_repo_rpm_location}}
  register: postgresRepoRpm

- name: Download postgres yum repo rpm if not present
  command: "wget -q -O {{ postgres_repo_rpm_location }} {{postgres_repo_download_url}} creates={{ postgres_repo_rpm_location }}"
  when: postgresRepoRpm.stat.exists == false

- name: Install postgresql yum repository
  yum: name={{postgres_repo_rpm_location}} state=present

- name: Install python-psycopg2
  yum: name=python-psycopg2 state=present

- name: Install postgresql-{{postgres_version}}
  yum: name="postgresql{{postgres_bin_version}}-server" state=present

- name: Install postgresql-contrib
  yum: name="postgresql{{postgres_bin_version}}-contrib" state=present

- name: Check if PostgreSQL database is initialized.
  stat:
    path: "{{ postgresql_data_dir }}/{{ postgres_version }}/data/base"
  register: pgdata_dir_version
  when: inventory_hostname in groups['bahmni-mart-db'] or authentication is defined and authentication == true

- name: Copy initdbfile
  template:
    src=initdbfile.j2
    dest=/tmp/initdbfile
    mode=644
    owner=postgres
  when: not pgdata_dir_version.stat.exists and authentication is defined and authentication == true

- name: Initiate database for postgresql 9.2
  command: service postgresql-{{ postgres_version }} initdb creates=/var/lib/pgsql/data/postgresql.conf
  when: isBahmniLessthan92 and postgres_version == 9.2

- name: Initiate database for postgresql 9.6
  command: /usr/pgsql-{{postgres_version}}/bin/postgresql{{postgres_bin_version}}-setup initdb creates=/var/lib/pgsql/{{postgres_version}}/data/postgresql.conf
  when: isBahmniLessthan92 == false and postgres_version == 9.6 and authentication is not defined or authentication != true

- name: Initiate database for postgresql 9.6 with authentication
  command: /usr/pgsql-{{postgres_version}}/bin/initdb --pgdata=/var/lib/pgsql/{{postgres_version}}/data --username=postgres --pwfile='/tmp/initdbfile'
  become_user: postgres
  when: isBahmniLessthan92 == false and postgres_version == 9.6 and not pgdata_dir_version.stat.exists and authentication is defined and authentication == true

- name: remove initdbfile
  command: rm -f /tmp/initdbfile
  when: not pgdata_dir_version.stat.exists and authentication is defined and authentication == true

- name: Copy postgresql conf
  template:
    src=postgresql.conf.j2
    dest=/var/lib/pgsql/{{ postgres_version }}/data/postgresql.conf
    owner=postgres
    group=postgres
    mode=644
  register: postgres_conf

- name: insert/update postgres config after "local" is for Unix domain socket connections only line
  lineinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    regexp: '^local\s+all\s+all\s+peer'
    state: present
    backrefs: yes
    line: local  all    all   trust
  when: authentication is not defined or authentication != true

- name: insert/update postgres config after IPv4 local connections line
  lineinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    regexp: '^host\s+all\s+all\s+127.0.0.1/32\s+ident'
    state: present
    backrefs: yes
    line: host  all    all   127.0.0.1/32 trust
  when: authentication is not defined or authentication != true

- name: insert/update postgres config after IPv6 local connections line
  lineinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    regexp: '^host\s+all\s+all\s+::1/128\s+ident'
    state: present
    backrefs: yes
    line: host  all    all   ::1/128 trust
  when: authentication is not defined or authentication != true

- name: Configure connection rules and postgres
  template: src={{ item.src }} dest={{ postgresql_data_dir }}/{{ postgres_version }}/data/{{ item.src | regex_replace(".j2") }}
  with_items:
    - { src: "pg_hba.conf.j2" }
  when: not pgdata_dir_version.stat.exists and authentication is defined and authentication == true

- name: Removing recovery config file from master db
  file:
      path=/var/lib/pgsql/{{ postgres_version }}/data/recovery.conf
      state=absent
  when: inventory_hostname in groups['bahmni-mart-db'] or inventory_hostname in groups['metabase-db']
  register: recovery_conf

- block:

    - name: Get matched IpTable rule
      shell: iptables -nL --line-numbers | grep POSTGRES  -m 1 | cut -c 1-2
      register: matchedRule

    - name: delete matching rule if exists
      shell: iptables -D INPUT {{ matchedRule.stdout }}
      when: matchedRule.stdout!=""

    - name: Allow postgres port through firewall
      command: /sbin/iptables -I INPUT 1 -p tcp --dport  5432 -j ACCEPT -m comment --comment "POSTGRES"

    - name: save iptables
      command: service iptables save

  when: docker is not defined

- name: Stop PostgreSQL
  service:
    name=postgresql-{{ postgres_version }}
    state=stopped
  when: postgres_conf.changed==true or (recovery_conf is defined and recovery_conf.changed==true)

- name: Start PostgreSQL and enable at boot
  service:
    name=postgresql-{{ postgres_version }}
    enabled=yes
    state=started

- name: Create postgres user with authentication
  postgresql_user: name={{ postgres_user }} role_attr_flags=CREATEDB,NOCREATEROLE,SUPERUSER,REPLICATION login_password={{ postgres_password }}
  sudo_user: postgres
  when: postgres_user is defined and (inventory_hostname in groups['bahmni-mart-db'] or inventory_hostname in groups['metabase-db']) and authentication is defined and authentication == true
# creating user only in master dbs. User creation will be replicated in slave.

- name: Create postgres user
  postgresql_user: name={{ postgres_user }} role_attr_flags=CREATEDB,NOCREATEROLE,SUPERUSER,REPLICATION
  sudo_user: postgres
  when: postgres_user is defined and (inventory_hostname in groups['bahmni-mart-db'] or inventory_hostname in groups['metabase-db']) and authentication is not defined or authentication != true
# creating user only in master dbs. User creation will be replicated in slave.
