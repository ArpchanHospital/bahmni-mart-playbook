
- name: Install and start docker
  include_role:
    name: docker

- name: Set metabase_db_server variable
  set_fact:
    metabase_db_server: "{{ default_docker_ip }}"
  when: metabase_db_server == 'localhost' or metabase_db_server == '127.0.0.1'

- name: Copy docker-compose file for metabase
  template:
    src=docker-compose.yml.j2
    dest={{ metabase_docker_compose_location }}
    mode=644
    owner={{ bahmni_user }}
    group={{ bahmni_group }}

- name: Create metabase DB
  postgresql_db:
    name: "{{ metabase_db_name }}"
    owner: "{{ metabase_db_user }}"
  when: passive is not defined or passive !='yes'

- name: Create backup directory
  file:
    path: /data/metabase
    mode: 0666
    owner: "{{ bahmni_user }}"
    group: "{{ bahmni_group }}"
    state: directory

- name: Copy metabase backup script
  template:
    src=metabase-backup.sh.j2
    dest=/opt/bahmni-mart/bin/metabase-backup.sh
    mode=755
    owner={{ bahmni_user }}
    group={{ bahmni_group }}

- name: Copy metabase restore script
  template:
    src=metabase-restore.sh.j2
    dest=/opt/bahmni-mart/bin/metabase-restore.sh
    mode=755
    owner={{ bahmni_user }}
    group={{ bahmni_group }}

- name: Update postgres config
  blockinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK metabase -->"
    insertafter: "metabase"
    state: present
    block: |
      host {{ metabase_db_name }} {{ metabase_db_user }} {{ default_docker_ip }}/16 trust #access through docker IP

- name: Reload postgresql on active machine
  service:
    name=postgresql-{{ postgres_version }}
    state=reloaded
  when: "{{ inventory_hostname in groups['metabase-db'] }}"

- name: Stop postgresql on passive machine
  service:
    name=postgresql-{{ postgres_version }}
    state=stopped
  when: "{{ inventory_hostname in groups['metabase-db-slave'] }}"
    
- name: Check if metabase container needs an update
  shell: docker ps -a | grep 'metabase' | awk '{print $ 2}'
  register: current_metabase_conatiner
  ignore_errors: true

- name: Remove exited containers
  become: yes
  shell: docker rm $(docker ps -f 'status=exited' | grep 'metabase' | awk '{print $ 1}')
  ignore_errors: true
  when: passive is not defined or passive !='yes' or current_metabase_conatiner.stdout != "{{ metabase_docker_image }}"

- name: Remove stopped containners
  command: docker-compose -f {{ metabase_docker_compose_location }} rm
  ignore_errors: true
  when: passive is not defined or passive !='yes' or current_metabase_conatiner.stdout != "{{ metabase_docker_image }}"

- name: Remove dangling images
  become: yes
  shell: docker rmi $(docker images -a | grep 'metabase' | awk '{print $ 3}')
  ignore_errors: true

- name: Create metabase docker conatainer
  command: docker-compose -f {{ metabase_docker_compose_location }} up -d

- name: Stop metabase docker conatainer on passive machine
  command: docker-compose -f {{ metabase_docker_compose_location }} stop
  when: passive is defined and passive=='yes'
  ignore_errors: true
