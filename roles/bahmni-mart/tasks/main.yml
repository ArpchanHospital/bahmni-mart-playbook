
- name: Check if bahmni-mart rpm needs an update
  yum:
    list: bahmni-mart
  register: installed_bahmni_mart
  ignore_errors: true

- name: Uninstall bahmni-mart rpm
  yum: name="bahmni-mart" state=absent
  when: installed_bahmni_mart.results|length != 0 and installed_bahmni_mart.results[0].version != "{{ bahmni_mart_version }}"

- name: Install bahmni-mart using URL
  yum: name="{{ bahmni_mart_url }}" state=present

- block:

    - name: Get matched IpTable rule
      shell: iptables -nL --line-numbers | grep MART  -m 1 | cut -c 1-2
      register: matchedRule

    - name: delete matching rule if exists
      shell: iptables -D INPUT {{ matchedRule.stdout }}
      when: matchedRule.stdout!=""

    - name: Allow openmrs port through firewall
      command: /sbin/iptables -I INPUT 1 -p tcp --dport  {{ mart_port }} -j ACCEPT -m comment --comment "MART"

    - name: save iptables
      command: service iptables save

- name: Set bahmni_mart_scdf_schema_name
  set_fact:
    bahmni_mart_scdf_schema_name: 'public'
  when: groups['bahmni-mart-scdf'] is not defined or groups['bahmni-mart-scdf']|length == 0

- name: Copy bahmni-mart config
  template:
    src=application.properties.j2
    dest=/opt/bahmni-mart/properties/application.properties
    mode=644
    owner={{ bahmni_user }}
    group={{ bahmni_group }}

- name: Create bahmni-mart DB
  postgresql_db:
    name: "{{ analytics_db_name }}"
    owner: "{{ analytics_db_user }}"
  when: passive is not defined or passive !='yes'
    
- name: Create backup directory
  file:
    path: /data/analytics
    mode: 0666
    owner: "{{ bahmni_user }}"
    group: "{{ bahmni_group }}"
    state: directory

- name: Copy bahmni-mart-backup script
  template:
    src=bahmni-mart-backup.sh.j2
    dest=/opt/bahmni-mart/bin/bahmni-mart-backup.sh
    mode=755
    owner={{ bahmni_user }}
    group={{ bahmni_group }}

- name: Copy bahmni-mart-restore script
  template:
    src=bahmni-mart-restore.sh.j2
    dest=/opt/bahmni-mart/bin/bahmni-mart-restore.sh
    mode=755
    owner={{ bahmni_user }}
    group={{ bahmni_group }}

- name: Install Liquibase
  yum:
    name: liquibase
    state: present

- name: Get postgresSql jar
  get_url:
    url: "https://jdbc.postgresql.org/download/postgresql-42.2.2.jar"
    dest: "{{ postgresql_jar_location }}"
    mode: 644
    owner: "{{ bahmni_user }}"
    group: "{{ bahmni_group }}"

- name: Run Liquibase migration
  command: "liquibase --driver='org.postgresql.Driver' --classpath='{{ postgresql_jar_location }}/{{ postgresql_jar_name }}' --changeLogFile='{{ liquibase_changelog_path }}' --defaultSchemaName='public' --url=jdbc:postgresql://{{ analytics_db_server }}:{{ analytics_db_port }}/{{ analytics_db_name }} --username={{ analytics_db_user }} --password={{ analytics_db_password }} update"
  when: passive is not defined or passive !='yes'
